const questions = [
    { question: "Ù‡Ù„ ÙƒØ§Ù† Ø¹ÙŠØ³Ù‰ ÙŠØ¹Ø¨Ø¯ Ø§Ù„Ù„Ù‡ Ø§Ù„ÙˆØ§Ø­Ø¯ØŸ", options: ["Ù†Ø¹Ù…", "Ù„Ø§"], answer: "Ù†Ø¹Ù…", color: ["#4CAF50", "#2E7D32"] },
    { question: "Ù…Ø§ Ø§Ù„Ø¯ÙŠØ§Ù†Ø© Ø§Ù„ÙˆØ­ÙŠØ¯Ø© Ø§Ù„ØªÙŠ ØªØ¹Ø¨Ø¯ Ø§Ù„Ù„Ù‡ Ø§Ù„ÙˆØ§Ø­Ø¯ØŸ", options: ["Ø§Ù„Ù…Ø³ÙŠØ­ÙŠØ©", "Ø§Ù„ÙŠÙ‡ÙˆØ¯ÙŠØ©", "Ø§Ù„Ø¥Ø³Ù„Ø§Ù…"], answer: "Ø§Ù„Ø¥Ø³Ù„Ø§Ù…", color: ["#FF9800", "#E65100"] },
    { question: "Ù‡Ù„ Ù‚Ø§Ù„ Ø¹ÙŠØ³Ù‰ Ø¥Ù†Ù‡ Ø±Ø³ÙˆÙ„ Ø§Ù„Ù„Ù‡ØŸ", options: ["Ù†Ø¹Ù…", "Ù„Ø§"], answer: "Ù†Ø¹Ù…", color: ["#2196F3", "#0D47A1"] },
    { question: "Ù…Ø§ Ø§Ù„Ø¯ÙŠØ§Ù†Ø© Ø§Ù„ØªÙŠ ØªØ¤Ù…Ù† Ø£Ù† Ø¹ÙŠØ³Ù‰ Ø±Ø³ÙˆÙ„ØŸ", options: ["Ø§Ù„Ù…Ø³ÙŠØ­ÙŠØ©", "Ø§Ù„Ø¥Ø³Ù„Ø§Ù…"], answer: "Ø§Ù„Ø¥Ø³Ù„Ø§Ù…", color: ["#9C27B0", "#6A1B9A"] },
    { question: "Ù‡Ù„ ÙƒØ§Ù† Ø¹ÙŠØ³Ù‰ ÙŠØ£ÙƒÙ„ Ù„Ø­Ù… Ø§Ù„Ø®Ù†Ø²ÙŠØ±ØŸ", options: ["Ù†Ø¹Ù…", "Ù„Ø§"], answer: "Ù„Ø§", color: ["#F44336", "#D32F2F"] },
    { question: "Ù…Ø§ Ø§Ù„Ø¯ÙŠØ§Ù†Ø© Ø§Ù„ØªÙŠ ØªØ­Ø±Ù… Ø£ÙƒÙ„ Ø§Ù„Ø®Ù†Ø²ÙŠØ±ØŸ", options: ["Ø§Ù„Ù…Ø³ÙŠØ­ÙŠØ©", "Ø§Ù„ÙŠÙ‡ÙˆØ¯ÙŠØ©", "Ø§Ù„Ø¥Ø³Ù„Ø§Ù…"], answer: "Ø§Ù„Ø¥Ø³Ù„Ø§Ù…", color: ["#FFEB3B", "#FBC02D"] },
    { question: "Ù‡Ù„ ÙƒØ§Ù† Ø¹ÙŠØ³Ù‰ ÙŠØ´Ø±Ø¨ Ø§Ù„Ø®Ù…Ø±ØŸ", options: ["Ù†Ø¹Ù…", "Ù„Ø§"], answer: "Ù„Ø§", color: ["#3F51B5", "#1A237E"] },
    { question: "Ù…Ø§ Ø§Ù„Ø¯ÙŠØ§Ù†Ø© Ø§Ù„ØªÙŠ ØªÙ†Ù‡Ù‰ Ø¹Ù† Ø´Ø±Ø¨ Ø§Ù„Ø®Ù…Ø±ØŸ", options: ["Ø§Ù„Ù…Ø³ÙŠØ­ÙŠØ©", "Ø§Ù„Ø¥Ø³Ù„Ø§Ù…"], answer: "Ø§Ù„Ø¥Ø³Ù„Ø§Ù…", color: ["#607D8B", "#455A64"] }
];

let currentQuestionIndex = 0;

function loadQuestion() {
    const questionElement = document.getElementById("question");
    const optionsElement = document.getElementById("options");
    const feedbackElement = document.getElementById("feedback");
    const askButton = document.getElementById("ask-btn");
    const body = document.getElementById("quiz-body");

    if (currentQuestionIndex >= questions.length) {
        questionElement.textContent = "ðŸŽ‰ ØªÙ‡Ø§Ù†ÙŠÙ†Ø§! Ù„Ù‚Ø¯ Ø£ÙƒÙ…Ù„Øª Ø§Ù„Ø§Ø®ØªØ¨Ø§Ø±.";
        optionsElement.innerHTML = "";
        askButton.style.display = "block";
        return;
    }

    const currentQuestion = questions[currentQuestionIndex];
    body.style.background = `linear-gradient(to right, ${currentQuestion.color[0]}, ${currentQuestion.color[1]})`;
    questionElement.textContent = currentQuestion.question;
    optionsElement.innerHTML = "";

    currentQuestion.options.forEach(option => {
        const button = document.createElement("button");
        button.textContent = option;
        button.onclick = () => checkAnswer(option);
        optionsElement.appendChild(button);
    });

    feedbackElement.textContent = "";
}

function checkAnswer(selectedOption) {
    if (selectedOption === questions[currentQuestionIndex].answer) {
        nextQuestion();
    }
}

function nextQuestion() {
    currentQuestionIndex++;
    loadQuestion();
}

function previousQuestion() {
    if (currentQuestionIndex > 0) {
        currentQuestionIndex--;
        loadQuestion();
    }
}

loadQuestion();